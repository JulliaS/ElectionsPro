// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Vybory;

namespace Vybory.Migrations
{
    [DbContext(typeof(ElectionsContext))]
    partial class AppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Vybory.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("HouseNumber");

                    b.Property<string>("Region");

                    b.Property<string>("Street");

                    b.Property<string>("Town");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Vybory.Models.Appeal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AppealTypeId");

                    b.Property<int?>("CitizenId");

                    b.Property<int?>("ElectionId");

                    b.Property<int?>("PollingStationId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("AppealTypeId");

                    b.HasIndex("CitizenId");

                    b.HasIndex("ElectionId");

                    b.HasIndex("PollingStationId");

                    b.ToTable("Appeals");
                });

            modelBuilder.Entity("Vybory.Models.AppealType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("AppealTypes");
                });

            modelBuilder.Entity("Vybory.Models.Candidat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CitizenId");

                    b.Property<int?>("ElectionId");

                    b.Property<int>("Number");

                    b.HasKey("Id");

                    b.HasAlternateKey("Number");

                    b.HasIndex("CitizenId");

                    b.HasIndex("ElectionId");

                    b.ToTable("Candidats");
                });

            modelBuilder.Entity("Vybory.Models.ChermanOfDistrict", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CitizenId");

                    b.Property<int?>("DistrictId");

                    b.Property<int?>("ElectionId");

                    b.HasKey("Id");

                    b.HasIndex("CitizenId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ElectionId");

                    b.ToTable("ChermanOfDistricts");
                });

            modelBuilder.Entity("Vybory.Models.ChermanOfPollingStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CitizenId");

                    b.Property<int?>("ElectionId");

                    b.Property<int?>("PollingStationId");

                    b.HasKey("Id");

                    b.HasIndex("CitizenId");

                    b.HasIndex("ElectionId");

                    b.HasIndex("PollingStationId");

                    b.ToTable("ChermanOfPollingStations");
                });

            modelBuilder.Entity("Vybory.Models.Citizen", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int?>("DistrictId");

                    b.Property<int?>("ElectionId");

                    b.Property<int?>("PollingStationId");

                    b.Property<int?>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ElectionId");

                    b.HasIndex("PollingStationId");

                    b.HasIndex("StatusId");

                    b.ToTable("Citizens");
                });

            modelBuilder.Entity("Vybory.Models.Complaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ComplaintTypeId");

                    b.Property<int?>("ElectionId");

                    b.Property<int?>("ObserverId");

                    b.Property<int?>("PollingStationId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("ComplaintTypeId");

                    b.HasIndex("ElectionId");

                    b.HasIndex("ObserverId");

                    b.HasIndex("PollingStationId");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("Vybory.Models.ComplaintType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("ComplaintTypes");
                });

            modelBuilder.Entity("Vybory.Models.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressId");

                    b.Property<string>("Center");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Number");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");


                    b.HasAlternateKey("Number");

                    b.HasIndex("AddressId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("Vybory.Models.Election", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndVote");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartVote");

                    b.Property<int?>("TourId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("Elections");
                });

            modelBuilder.Entity("Vybory.Models.Observer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CitizenId");

                    b.Property<int?>("ElectionId");

                    b.Property<int?>("PollingStationId");

                    b.HasKey("Id");

                    b.HasIndex("CitizenId");

                    b.HasIndex("ElectionId");

                    b.HasIndex("PollingStationId");

                    b.ToTable("Observers");
                });

            modelBuilder.Entity("Vybory.Models.PollingStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressId");

                    b.Property<int?>("DistrictId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Number");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");


                    b.HasAlternateKey("Number");

                    b.HasIndex("AddressId");

                    b.HasIndex("DistrictId");

                    b.ToTable("PollingStations");
                });

            modelBuilder.Entity("Vybory.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Vybory.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Vybory.Models.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Number");

                    b.HasKey("Id");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("Vybory.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Birthday");

                    b.Property<int>("IPN");

                    b.Property<string>("Login");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<int?>("RoleId");

                    b.Property<string>("Surname");

                    b.HasKey("Id");

                    b.HasAlternateKey("IPN");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Vybory.Models.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CandidatId");

                    b.Property<int?>("CitizenId");

                    b.Property<int?>("ElectionId");

                    b.Property<int?>("PollingStationId");

                    b.HasKey("Id");

                    b.HasIndex("CandidatId");

                    b.HasIndex("CitizenId");

                    b.HasIndex("ElectionId");

                    b.HasIndex("PollingStationId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("Vybory.Models.Appeal", b =>
                {
                    b.HasOne("Vybory.Models.AppealType", "AppealType")
                        .WithMany("Appeals")
                        .HasForeignKey("AppealTypeId");

                    b.HasOne("Vybory.Models.Citizen", "Citizen")
                        .WithMany("Appeals")
                        .HasForeignKey("CitizenId");

                    b.HasOne("Vybory.Models.Election", "Election")
                        .WithMany("Appeals")
                        .HasForeignKey("ElectionId");

                    b.HasOne("Vybory.Models.PollingStation", "PollingStation")
                        .WithMany("Appeals")
                        .HasForeignKey("PollingStationId");
                });

            modelBuilder.Entity("Vybory.Models.Candidat", b =>
                {
                    b.HasOne("Vybory.Models.Citizen", "Citizen")
                        .WithMany("Candidats")
                        .HasForeignKey("CitizenId");

                    b.HasOne("Vybory.Models.Election", "Election")
                        .WithMany("Candidats")
                        .HasForeignKey("ElectionId");
                });

            modelBuilder.Entity("Vybory.Models.ChermanOfDistrict", b =>
                {
                    b.HasOne("Vybory.Models.Citizen", "Citizen")
                        .WithMany("ChermanOfDistricts")
                        .HasForeignKey("CitizenId");

                    b.HasOne("Vybory.Models.District", "District")
                        .WithMany("ChermanOfDistricts")
                        .HasForeignKey("DistrictId");

                    b.HasOne("Vybory.Models.Election", "Election")
                        .WithMany("ChermanOfDistricts")
                        .HasForeignKey("ElectionId");
                });

            modelBuilder.Entity("Vybory.Models.ChermanOfPollingStation", b =>
                {
                    b.HasOne("Vybory.Models.Citizen", "Citizen")
                        .WithMany("ChermanOfPollingStations")
                        .HasForeignKey("CitizenId");

                    b.HasOne("Vybory.Models.Election", "Election")
                        .WithMany("ChermanOfPollingStations")
                        .HasForeignKey("ElectionId");

                    b.HasOne("Vybory.Models.PollingStation", "PollingStation")
                        .WithMany("ChermanOfPollingStations")
                        .HasForeignKey("PollingStationId");
                });

            modelBuilder.Entity("Vybory.Models.Citizen", b =>
                {
                    b.HasOne("Vybory.Models.District", "District")
                        .WithMany("Citizens")
                        .HasForeignKey("DistrictId");

                    b.HasOne("Vybory.Models.Election", "Election")
                        .WithMany("Citizens")
                        .HasForeignKey("ElectionId");

                    b.HasOne("Vybory.Models.User", "User")
                        .WithOne("Citizen")
                        .HasForeignKey("Vybory.Models.Citizen", "Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vybory.Models.PollingStation", "PollingStation")
                        .WithMany("Citizens")
                        .HasForeignKey("PollingStationId");

                    b.HasOne("Vybory.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("Vybory.Models.Complaint", b =>
                {
                    b.HasOne("Vybory.Models.ComplaintType", "ComplaintType")
                        .WithMany("Complaints")
                        .HasForeignKey("ComplaintTypeId");

                    b.HasOne("Vybory.Models.Election", "Election")
                        .WithMany("Complaints")
                        .HasForeignKey("ElectionId");

                    b.HasOne("Vybory.Models.Observer", "Observer")
                        .WithMany("Complaints")
                        .HasForeignKey("ObserverId");

                    b.HasOne("Vybory.Models.PollingStation", "PollingStation")
                        .WithMany("Complaints")
                        .HasForeignKey("PollingStationId");
                });

            modelBuilder.Entity("Vybory.Models.District", b =>
                {
                    b.HasOne("Vybory.Models.Address", "Address")
                        .WithMany("Districts")
                        .HasForeignKey("AddressId");
                });

            modelBuilder.Entity("Vybory.Models.Election", b =>
                {
                    b.HasOne("Vybory.Models.Tour", "Tour")
                        .WithMany("Elections")
                        .HasForeignKey("TourId");
                });

            modelBuilder.Entity("Vybory.Models.Observer", b =>
                {
                    b.HasOne("Vybory.Models.Citizen", "Citizen")
                        .WithMany("Observers")
                        .HasForeignKey("CitizenId");

                    b.HasOne("Vybory.Models.Election", "Election")
                        .WithMany("Observers")
                        .HasForeignKey("ElectionId");

                    b.HasOne("Vybory.Models.PollingStation", "PollingStation")
                        .WithMany("Observers")
                        .HasForeignKey("PollingStationId");
                });

            modelBuilder.Entity("Vybory.Models.PollingStation", b =>
                {
                    b.HasOne("Vybory.Models.Address", "Address")
                        .WithMany("PollingStations")
                        .HasForeignKey("AddressId");

                    b.HasOne("Vybory.Models.District", "District")
                        .WithMany("PollingStations")
                        .HasForeignKey("DistrictId");
                });

            modelBuilder.Entity("Vybory.Models.User", b =>
                {
                    b.HasOne("Vybory.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("Vybory.Models.Vote", b =>
                {
                    b.HasOne("Vybory.Models.Candidat", "Candidat")
                        .WithMany("Votes")
                        .HasForeignKey("CandidatId");

                    b.HasOne("Vybory.Models.Citizen", "Citizen")
                        .WithMany("Votes")
                        .HasForeignKey("CitizenId");

                    b.HasOne("Vybory.Models.Election", "Election")
                        .WithMany("Votes")
                        .HasForeignKey("ElectionId");

                    b.HasOne("Vybory.Models.PollingStation", "PollingStation")
                        .WithMany("Votes")
                        .HasForeignKey("PollingStationId");
                });
#pragma warning restore 612, 618
        }
    }
}
